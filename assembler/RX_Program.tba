;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^;
;    Author    : Chanartip Soonthornwan                     ;
;    Student_ID: 014353883                                  ;
;    Email     : Chanartip.Soonthornwan@gmail.com           ;
;    Subject   : CECS460                                    ;
;    Instructor: John Tramel                                ;
;    Assignment: Project Three Receive Engine               ;
;                                                           ;
;    Current Version: 1.0                                   ;
;    Date      : April 16, 2018                             ;
;                                                           ;
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^;

;=============================================================
; Data Constants
;=============================================================
ZEROS           EQU     0000
ONE             EQU     0001
TWO             EQU     0002
THREE           EQU     0003
FOUR            EQU     0004
FIVE            EQU     0005
SIX             EQU     0006
MAX_CHAR        EQU     0028
TEN             EQU     000A
ASCII           EQU     0030

;=============================================================
; ScratchPad alias
;=============================================================
BANNER_BEGIN    EQU     0000
BANNER_END      EQU     0097
PROMPT_BEGIN    EQU     0097
PROMPT_END      EQU     00B3
HOMETOWN_BEGIN  EQU     00B3
HOMETOWN_END    EQU     00CB
CRLF_BEGIN      EQU     00CB
CRLF_END        EQU     00CD
BSSP_BEGIN      EQU     00CD
BSSP_END        EQU     00D0
COUNT_BEGIN     EQU     00D0
COUNT_TEN       EQU     00D0
COUNT_ONE       EQU     00D1
COUNT_END       EQU     00D2

;=============================================================
; Register alias
;=============================================================
TEMP_REG        EQU     R1
COUNT           EQU     R2
INDEX           EQU     R3
LED             EQU     R4
DELAY           EQU     R5
DELAY2          EQU     R6
PRINT_FLAG      EQU     R7
ECHO_END        EQU     R8
UART_STATUS     EQU     R9
CHAR_COUNT      EQU     RA
HOW_MANY        EQU     RB
RESULT          EQU     RC

;=============================================================
; Port alias
;=============================================================
DATA_PORT       EQU     0000
STATUS_PORT     EQU     0001
LED_PORT        EQU     0002

;=============================================================
; ASCII in uses
;=============================================================
ASC_NULL   EQU   0000  ; NULL
ASC_BS     EQU   0008  ; Back Space
ASC_TAB    EQU   0009  ; Horizontal Tab
ASC_LF     EQU   000A  ; <LF> Line Feed (new line)
ASC_CR     EQU   000D  ; <CR> Carriage return
ASC_STAR   EQU   002A  ; '*'  star
ASC_AT     EQU   0040  ; '@'  at
ASC_DOT    EQU   002E  ; '.'  dot
ASC_SL     EQU   002F  ; '/'  slash
ASC_EQ     EQU   003D  ; '='  equal sign
ASC_DASH   EQU   002D  ; '-'  dash
ASC_SP     EQU   0020  ; ' '  space
ASC_LB     EQU   005B  ; '['  Left Bracket
ASC_RB     EQU   005D  ; '];  Right Bracket
ASC_0      EQU   0030
ASC_1      EQU   0031
ASC_2      EQU   0032
ASC_3      EQU   0033
ASC_4      EQU   0034
ASC_5      EQU   0035
ASC_6      EQU   0036
ASC_7      EQU   0037
ASC_8      EQU   0038
ASC_9      EQU   0039
ASC_A      EQU   0041
ASC_B      EQU   0042
ASC_C      EQU   0043
ASC_D      EQU   0044
ASC_E      EQU   0045
ASC_F      EQU   0046
ASC_G      EQU   0047
ASC_H      EQU   0048
ASC_I      EQU   0049
ASC_J      EQU   004A
ASC_K      EQU   004B
ASC_L      EQU   004C
ASC_M      EQU   004D
ASC_N      EQU   004E
ASC_O      EQU   004F
ASC_P      EQU   0050
ASC_Q      EQU   0051
ASC_R      EQU   0052
ASC_S      EQU   0053
ASC_T      EQU   0054
ASC_U      EQU   0055
ASC_V      EQU   0056
ASC_W      EQU   0057
ASC_X      EQU   0058
ASC_Y      EQU   0059
ASC_Z      EQU   005A

;=============================================================
; Startup: Initialize the design at reset
;
;   Procedure:
;       - Reset and Set registers
;       - Store Banner, Prompt, HOMETOWN, CRLF and BSSP
;           in the ScratchPad RAM
;       - Reset the index register to be ready for the next use.
;       - Start the Program with Interrupt Enable
;
;   Main(){
;       BLINK_LED();
;   }
;
;=============================================================
            ADDRESS 0000
INIT
; Initialize registers
            LOAD    TEMP_REG, ZEROS
            LOAD    COUNT, ZEROS
            LOAD    INDEX, ZEROS
            LOAD    LED, ZEROS
            LOAD    PRINT_FLAG, FOUR
            LOAD    UART_STATUS, ZEROS
            LOAD    CHAR_COUNT, ZEROS

            CALL    BANNER_INIT
            CALL    PROMPT_INIT
            CALL    HOMETOWN_INIT

            ; Initialize CRLF in ScratchPad
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE

            ; Initialize BSSP in ScratchPad
            LOAD    TEMP_REG, ASC_BS
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_BS
            STORE   TEMP_REG, INDEX

            AND     INDEX, ZEROS ; Reset to ZEROS to be ready to display

START       ENINT

; Main Loop
MAIN
            CALL    BLINK_LED
            JUMP    MAIN

;=============================================================
; Subroutine: BANNER_INIT
;       Displaying a banner with a prompt upon reset
;
;   Store a Banner to ScratchPad Memory
;   //////////////////////////////////////////////////
;       CECS460 PROJECT3
;       By  CHANARTIP SOONTHORNWAN
;   //////////////////////////////////////////////////
;
;   by incrementing the memory pointer each time storing a character
;
;   input registers: none
;   output registers: none
;=============================================================
            ADDRESS 0040
BANNER_INIT
            LOAD    TEMP_REG, ASC_SL
SL_50       STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            ADD     COUNT, ONE
            COMP    COUNT, 0031         ; if count < 0d50
            JUMPC   SL_50
            LOAD    COUNT, ZEROS

            COMP    INDEX, 0064         ; if index > 0d100
            JUMPNC  DONE_BANNER

            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE

            LOAD    TEMP_REG, ASC_TAB
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_C
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_C
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_S
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_4
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_6
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_0
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_P
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_R
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_J
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_C
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_3
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_TAB
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_B
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_Y
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_TAB
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_C
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_H
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_A
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_A
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_R
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_I
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_P
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_S
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_H
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_R
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_W
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_A
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE

            LOAD    TEMP_REG, ASC_SL
            JUMP    SL_50

DONE_BANNER
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE          ; should be index for PROMPT BEGIN

            LOAD    COUNT, ZEROS

            RETURN

;=============================================================
; Subroutine:   PROMPT_INIT
;   Store a Prompt into the ScratchPad Memory
;
;   procedure:
;       - increment the index each time storing a character
;
;       PRESS ANY KEY TO CONTINUE...
;
;   input registers: none
;   output registers: none
;=============================================================
            ADDRESS 0170

PROMPT_INIT
            LOAD    TEMP_REG, ASC_P
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_R
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_S
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_S
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_A
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_Y
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_K
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_Y
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_C
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_I
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_U
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_DOT
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_DOT
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_DOT
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE          ; This INDEX should be HOMETOWN_BEGIN

            RETURN

;=============================================================
; Sub Routine: HOMETOWN_INIT
;       Store "MY HOMETOWN IS BANGKOK"
;
;=============================================================
            ADDRESS 0200

HOMETOWN_INIT
            LOAD    TEMP_REG, ASC_M
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_Y
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_H
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_M
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_E
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_T
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_W
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_I
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_S
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_SP
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_B
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_A
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_N
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_G
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_K
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_O
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_K
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_CR
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE
            LOAD    TEMP_REG, ASC_LF
            STORE   TEMP_REG, INDEX
            ADD     INDEX, ONE    ; This INDEX should be CRLF_BEGIN

            RETURN

;=============================================================
; Subroutine: BLINK_LED
;       Blinking LEDs while idling the main loop
;
;   Procedure:
;       - Decrementing counters each time the routine is called.
;       0xFFFF * 0x0019 provides 60HZ for LED to visibly blinking.
;       - Once the both counter reach zeros, assigning new LED
;       values and then outputs the value through LED_PORT(0002).
;
;   input registers: none
;   output registers: none
;=============================================================
            ADDRESS 0290
BLINK_LED
            LOAD    DELAY, FFFF
            LOAD    DELAY2, 0019
TAG
            SUB     DELAY, ONE
            JUMPNZ  TAG
            LOAD    DELAY, FFFF
            SUB     DELAY2, ONE
            JUMPNZ  TAG

            XOR     LED, 00FF
            OUTPUT  LED, LED_PORT
            RETURN
;=============================================================
; Routine: BIN_TO_ASCII
;
;   function: converting a 16-bit number into ASCII.
;       Dividing input CECS_COUNT by TEN_THOUSAND, ONE_THOUSAND,
;           ONE_HUNDREDS, TEN, and ONE then stores the
;           division at scratch-pad address 0011, 0012, 0013,
;           0014, and 0015 consequently.
;   pseudo code:
;		HOW_MANY = 0
;       RESULT = COUNT;
;		while(RESULT-10 > 0){
;			RESULT -= 10;
;			HOW_MANY++;
;		}
;	
;	Input Register: 
;		COUNT - number of character received 
;				from serial terminal.
;
;	Output Registers: 
;		COUNT_TEN - stores ASCII of MSB of COUNT
;		COUNT_ONE - stores ASCII of LSB of COUNT	
;=============================================================

; Address for BIN_TO_ASC
            ADDRESS 0310

BIN_TO_ASCII
            LOAD    HOW_MANY, ZEROS
            LOAD    RESULT, COUNT

SUB_FIND
            SUB     RESULT, TEN
            JUMPC   DONE_FIND
            ADD     HOW_MANY, ONE
            JUMP    SUB_FIND
DONE_FIND
            ADD     RESULT, TEN
            ADD     HOW_MANY, ASCII
            STORE   HOW_MANY, COUNT_TEN

            ADD     RESULT, ASCII
            STORE   RESULT, COUNT_ONE

            RETURN

;=============================================================
;   Subroutine: TX_FUNC
;
;   function: Output a character to TramelBlaze through 
;		DATA_PORT(0000) according to the current PRINT_FLAG.
;		If the PRINT_FLAG is zeros, UART is not transmitting
;		at the moment.
;
;	Procedure:
;		if(PRINT_FLAG == 0) return;
;		else{
;			printf(Mem[index]);
;			switch(PRINT_FLAG){
;				case 0006: DISPLAY_COUNT();
;				case 0005: DISPLAY_BSSP();
;				case 0004: DISPLAY_BANNER();
;				case 0003: DISPLAY_PROMPT();
;				case 0002: DISPLAY_HOMETOWN();
;				case 0001: DISPLAY_CRLF();
;			}
;		}
;
;	Input register:
;		PRINT_FLAG - hold current printing mode.
;
;=============================================================
            ADDRESS 0330
TX_FUNC
            COMP    PRINT_FLAG, ZEROS
            RETURNZ

            FETCH   TEMP_REG, INDEX
            OUTPUT  TEMP_REG, DATA_PORT
            ADD     INDEX, ONE

            COMP    PRINT_FLAG, SIX
            JUMPZ   DISPLAY_COUNT
            COMP    PRINT_FLAG, FIVE
            JUMPZ   DISPLAY_BSSP
            COMP    PRINT_FLAG, FOUR
            JUMPZ   DISPLAY_BANNER
            COMP    PRINT_FLAG, THREE
            JUMPZ   DISPLAY_PROMPT
            COMP    PRINT_FLAG, TWO
            JUMPZ   DISPLAY_HOMETOWN
            COMP    PRINT_FLAG, ONE
            JUMPZ   DISPLAY_CRLF

            RETURN

DISPLAY_COUNT
            COMP    INDEX, COUNT_END
            RETURNC
            LOAD    INDEX, CRLF_BEGIN
            LOAD    PRINT_FLAG, ONE
            RETURN

DISPLAY_BSSP
            COMP    INDEX, BSSP_END
            RETURNC
            LOAD    PRINT_FLAG, ZEROS
            RETURN

DISPLAY_BANNER
            COMP    INDEX, BANNER_END
            RETURNC
            LOAD    PRINT_FLAG, THREE
            RETURN

DISPLAY_PROMPT
            COMP    INDEX, PROMPT_END
            RETURNC
            LOAD    PRINT_FLAG, ZEROS
            RETURN

DISPLAY_HOMETOWN
            COMP    INDEX, HOMETOWN_END
            RETURNC
            LOAD    INDEX, PROMPT_BEGIN
            LOAD    PRINT_FLAG, THREE
            RETURN

DISPLAY_CRLF
            COMP    INDEX, CRLF_END
            RETURNC
            LOAD    INDEX, PROMPT_BEGIN
            LOAD    PRINT_FLAG, THREE
            RETURN


;=============================================================
;   Subroutine: RX_FUNC
;
;	function: Setting the PRINT_FLAG and INDEX to be ready 
;				to display on the Serial Terminal on the next
;				TX interrupt according to the received 
;				character input.
;
;	Procedure: 
;		if(PRINT_FLAG > 0) return;
;		else{
;			TEMP_REG = get_input();
;
;			switch(TEMP_REG){
;				case '*'   : SET_HOMETOWN();
;				case '<cr>': SET_CRLF();
;				case '<bs>': SET_BSSP();
;				case '@'   : SET_AT();
;				default    : SET_ECHO();
;			}
;		}
;
;=============================================================
            ADDRESS 0400
RX_FUNC
            COMP    PRINT_FLAG, ZEROS
            RETURNNZ

            INPUT   TEMP_REG, DATA_PORT
            COMP    TEMP_REG, ZEROS
            RETURNZ

            COMP    TEMP_REG, ASC_STAR
            JUMPZ   SET_HOMETOWN

            COMP    TEMP_REG, ASC_CR
            JUMPZ   SET_CRLF

            COMP    TEMP_REG, ASC_BS
            JUMPZ   SET_BSSP

            COMP    TEMP_REG, ASC_AT
            JUMPZ   SET_AT

SET_ECHO
            COMP    COUNT, MAX_CHAR
            JUMPZ   SET_CRLF
            ADD     COUNT, ONE
            OUTPUT  TEMP_REG, DATA_PORT

            RETURN


SET_HOMETOWN
            LOAD    PRINT_FLAG, TWO
            LOAD    INDEX, HOMETOWN_BEGIN
            LOAD    TEMP_REG, ASC_NULL
            OUTPUT  TEMP_REG, DATA_PORT
            LOAD    COUNT, ZEROS
            RETURN

SET_CRLF
            LOAD    PRINT_FLAG, ONE
            LOAD    INDEX, CRLF_BEGIN
            LOAD    TEMP_REG, ASC_NULL
            OUTPUT  TEMP_REG, DATA_PORT
            LOAD    COUNT, ZEROS
            RETURN

SET_BSSP
            COMP    COUNT, ZEROS
            RETURNZ
            LOAD    PRINT_FLAG, FIVE
            LOAD    INDEX, BSSP_BEGIN
            LOAD    TEMP_REG, ASC_NULL
            OUTPUT  TEMP_REG, DATA_PORT
            SUB     COUNT, ONE
            RETURN

SET_AT
            CALL    BIN_TO_ASCII
            LOAD    PRINT_FLAG, SIX
            LOAD    INDEX, COUNT_BEGIN
            LOAD    TEMP_REG, ASC_NULL
            OUTPUT  TEMP_REG, DATA_PORT
            LOAD    COUNT, ZEROS
            RETURN

;=============================================================
; Sub Routine: Interrupt Service Routine(ISR)
;       Checking UART STATUS if the UART is ready to
;       transmit or receive a character
;       If the Transmit Engine is ready, (UART_STATUS & 0x0002) == 1
;       If the Receive Engine is ready, (UART_STATUS & 0x0001) == 1
;       Where UART_STATUS is an 8-bit data from UART data
;       read from STATUS_PORT(0001)
;       UART_STATUS consists
;           {3'b0, w_ovf, w_ferr, w_perr, w_txrdy, w_rxrdy};
;       which ovf    - overflow flag
;             ferr   - framing error
;             perr   - parity bit error
;           * txrdy  - transmit ready
;           * rxrdy  - receive ready
;
;   Procedure:
;       UART_STATUS = INPUT[STATUS_PORT];
;		UART_STATUS &= 0x0003;   
;
;       if(UART_STATUS = 0x0003) CALL_BOTH(); else
;       if(UART_STATUS = 0x0002) TX_FUNC();   else
;       if(UART_STATUS = 0x0001) RX_FUNC();
;       else 
;			return;
;
;   input registers: none
;       UART_STATUS - Reading the current UART status from UART;
;                     then store it for if-statement.
;   output registers: none
;
;=============================================================
            ADDRESS 0E00
ISR
            INPUT   UART_STATUS, STATUS_PORT
            AND     UART_STATUS, THREE          ; check TX_rdy & RX_rdy

            COMP    UART_STATUS, THREE
            JUMPZ   CALL_BOTH

            COMP    UART_STATUS, TWO
            CALLZ   TX_FUNC                     ; TX is ready

            COMP    UART_STATUS, ONE
            CALLZ   RX_FUNC                     ; RX is ready

            RETEN

CALL_BOTH
            CALL    TX_FUNC                     ; prioritize to TX
            CALL    RX_FUNC
            RETEN

;=============================================================
;   ISR vectored through 0FFE
;   Jump to ISR routine
;=============================================================

            ADDRESS 0FFE

ENDIT
            JUMP ISR

            END

